<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation on STEM Notes</title>
    <link>https://stem-notes.netlify.com/docs/</link>
    <description>Recent content in Documentation on STEM Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 29 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://stem-notes.netlify.com/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NodeJS and NPM</title>
      <link>https://stem-notes.netlify.com/docs/node-npm/</link>
      <pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/node-npm/</guid>
      <description>Node Package Manager (NPM) is the world&amp;rsquo;s largest software registry, with approximately 3 billion downloads per week. npm opens up an entire world of JavaScript talent to you and to your team. The registry contains over 600,000 packages (building blocks of code).
Open-source developers from every continent share and borrow packages through npm, accessing algorithms designed across the planet or across the street. Packages follow specific structures to enable you to track and manage versions and multiple dependencies.</description>
    </item>
    
    <item>
      <title>Flowcharts support</title>
      <link>https://stem-notes.netlify.com/docs/flowcharts/</link>
      <pubDate>Sun, 29 Jul 2018 09:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/flowcharts/</guid>
      <description>In order to include flowchart.js diagram, add the following attribute to the page metadata section:
--- flowchart: true ---  You may then start embedding flowcharts.
Flowchart To embed an example flowchart, add code block section labeled with flowchart as a language:
```flowchart st=&amp;gt;start: Start:&amp;gt;http://www.google.com[blank] e=&amp;gt;end:&amp;gt;http://www.google.com op1=&amp;gt;operation: My Operation sub1=&amp;gt;subroutine: My Subroutine cond=&amp;gt;condition: Yes or No?:&amp;gt;http://www.google.com io=&amp;gt;inputoutput: catch something... para=&amp;gt;parallel: parallel tasks st-&amp;gt;op1-&amp;gt;cond cond(yes)-&amp;gt;io-&amp;gt;e cond(no)-&amp;gt;para para(path1, bottom)-&amp;gt;sub1(right)-&amp;gt;op1 para(path2, top)-&amp;gt;op1 ```  st=&amp;gt;start: Start:&amp;gt;http://www.</description>
    </item>
    
    <item>
      <title>Message Sequence Charts</title>
      <link>https://stem-notes.netlify.com/docs/message-sequence-charts/</link>
      <pubDate>Fri, 27 Jul 2018 10:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/message-sequence-charts/</guid>
      <description>Engimo supports embedding simple message sequence charts, with help of js-sequence-diagrams.
A simple sequence chart like this one:
Andrew-&amp;gt;China: Says Hello Note right of China: China thinks\nabout it China--&amp;gt;Andrew: How are you? Andrew-&amp;gt;&amp;gt;China: I am good thanks! can be embedded with enabling these chart types on a page with
--- msc: true ---  and then creating code block with msc type:
```msc Andrew-&amp;gt;China: Says Hello Note right of China: China thinks\nabout it China--&amp;gt;Andrew: How are you?</description>
    </item>
    
    <item>
      <title>2D Charts</title>
      <link>https://stem-notes.netlify.com/docs/charts/</link>
      <pubDate>Fri, 27 Jul 2018 09:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/charts/</guid>
      <description>Engimo adds support for chars rendered with help of Chart.js.
This bar chart is an example of what the support looks like:
{ &amp;#34;type&amp;#34;: &amp;#34;bar&amp;#34;, &amp;#34;data&amp;#34;: { &amp;#34;labels&amp;#34;: [&amp;#34;One&amp;#34;, &amp;#34;Two&amp;#34;, &amp;#34;Three&amp;#34;, &amp;#34;Four&amp;#34;, &amp;#34;Five&amp;#34;, &amp;#34;Six&amp;#34;], &amp;#34;datasets&amp;#34;: [{ &amp;#34;label&amp;#34;: &amp;#34;# of Votes&amp;#34;, &amp;#34;data&amp;#34;: [12, 19, 3, 5, 3, 8] }] } } To get chart like this one above, follow the steps:
 Add this to the metadata section
--- chart: true ---  Then add the chart to the page, e.</description>
    </item>
    
    <item>
      <title>Deprecated Pages</title>
      <link>https://stem-notes.netlify.com/docs/deprecated/</link>
      <pubDate>Fri, 27 Jul 2018 09:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/deprecated/</guid>
      <description>Engimo adds a new boolean parameter to the metadata section: deprecated. When set to true like this:
--- deprecated: true ---  then the page will have a red box indicating that:
This page has been marked as deprecated &amp;nbsp;
In addition, when the title of the page is listed (e.g. with tags, categories lists etc.) the title is extended with (deprecated) phrase.</description>
    </item>
    
    <item>
      <title>Digital Signals Waveforms</title>
      <link>https://stem-notes.netlify.com/docs/waveforms/</link>
      <pubDate>Thu, 26 Jul 2018 09:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/waveforms/</guid>
      <description>Engimo support embedding wavedrom diagrams. For that, insert the following line into page metadata section:
--- wave: true ---  then, in the content you may inline the diagram using viz-dot as a language:
```wave { &amp;quot;signal&amp;quot;: [ {&amp;quot;name&amp;quot;:&amp;quot;CLK&amp;quot;, &amp;quot;wave&amp;quot;:&amp;quot;p.....|...&amp;quot;}, {&amp;quot;name&amp;quot;:&amp;quot;DAT&amp;quot;, &amp;quot;wave&amp;quot;:&amp;quot;x.345x|=.x&amp;quot;, &amp;quot;data&amp;quot;:[&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;D&amp;quot;]}, {&amp;quot;name&amp;quot;:&amp;quot;REQ&amp;quot;, &amp;quot;wave&amp;quot;:&amp;quot;0.1..0|1.0&amp;quot;}, {}, {&amp;quot;name&amp;quot;:&amp;quot;ACK&amp;quot;, &amp;quot;wave&amp;quot;: &amp;quot;1.....|01.&amp;quot;} ]} ```  Result { &amp;#34;signal&amp;#34;: [ {&amp;#34;name&amp;#34;: &amp;#34;CLK&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;p.....|...&amp;#34;}, {&amp;#34;name&amp;#34;:&amp;#34;DAT&amp;#34;, &amp;#34;wave&amp;#34;:&amp;#34;x.345x|=.x&amp;#34;, &amp;#34;data&amp;#34;:[&amp;#34;A&amp;#34;,&amp;#34;B&amp;#34;,&amp;#34;C&amp;#34;,&amp;#34;D&amp;#34;]}, {&amp;#34;name&amp;#34;: &amp;#34;REQ&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;0.1..0|1.0&amp;#34;}, {}, {&amp;#34;name&amp;#34;: &amp;#34;ACK&amp;#34;, &amp;#34;wave&amp;#34;: &amp;#34;1.</description>
    </item>
    
    <item>
      <title>Graphviz Support</title>
      <link>https://stem-notes.netlify.com/docs/graphviz/</link>
      <pubDate>Thu, 26 Jul 2018 09:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/graphviz/</guid>
      <description>In order to include graphviz diagram, add the following attribute to the page metadata section:
--- viz: true ---  You may then start adding diagrams.
Directed graphs To embed directed graphs, add code block section labeled with viz-dot as a language:
```viz-dot digraph g { node[shape=&amp;quot;circle&amp;quot; , label=&amp;quot;&amp;quot;, width=0.2, height=0.2] l1[xlabel=&amp;quot;v\(s\)&amp;quot;] l21[xlabel=&amp;quot;a&amp;quot;, width=0.1, height=0.1 , style=filled] l22[width=0.1, height=0.3, style=filled] l31[xlabel=&amp;quot;v\(s&#39;\)&amp;quot;] l1 -&amp;gt; l21 l1 -&amp;gt; l22 l21 -&amp;gt; l31 [xlabel=&amp;quot;r&amp;quot;] l21 -&amp;gt; l32 l22 -&amp;gt; l33 l22 -&amp;gt; l34 } ```  digraph g { node[shape=&amp;#34;circle&amp;#34; , label=&amp;#34;&amp;#34;, width=0.</description>
    </item>
    
    <item>
      <title>Search: Fuse.js</title>
      <link>https://stem-notes.netlify.com/docs/search-fuse-js/</link>
      <pubDate>Fri, 06 Jul 2018 01:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/search-fuse-js/</guid>
      <description> Configure Fuse.js Search Client Select Fuse.js as the search client in your config.toml file:
[params.search] client = &amp;#34;fuse&amp;#34;</description>
    </item>
    
    <item>
      <title>Search: Algolia</title>
      <link>https://stem-notes.netlify.com/docs/search-algolia/</link>
      <pubDate>Thu, 05 Jul 2018 23:30:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/search-algolia/</guid>
      <description>Configure Algolia Search Client Select Algolia as the search client in your config.toml file:
[params.search] client = &amp;#34;algolia&amp;#34; Also, add configuration options for Algolia:
[params.search.algolia] appId = &amp;#34;&amp;#34; indexName = &amp;#34;&amp;#34; searchApiKey = &amp;#34;&amp;#34;  params.search.algolia [Map]:  appId [String]: Algolia Application ID indexName [String]: Name for Algolia Indices
default: engimo_site searchApiKey [String]: Algolia Search-Only API Key   You&amp;rsquo;ll find various information related to your Algolia account in the Algolia Dashboard.</description>
    </item>
    
    <item>
      <title>Search: Lunr.js</title>
      <link>https://stem-notes.netlify.com/docs/search-lunr-js/</link>
      <pubDate>Thu, 05 Jul 2018 20:30:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/search-lunr-js/</guid>
      <description>Configure Lunr.js Search Client Select Lunr.js as the search client in your config.toml file:
[params.search] client = &amp;#34;lunr&amp;#34; Generate Search Index for Lunr.js Lunr.js will need a search index for searching across your site. So, you&amp;rsquo;ll need to generate that search index for Lunr.js before you deploy your site.
Engimo comes with a script for generating the search index for Lunr.js: /scripts/generate-search-index-lunr.js.
Install Dependencies Node.js must be installed on your system for using the generator script.</description>
    </item>
    
    <item>
      <title>Search Support</title>
      <link>https://stem-notes.netlify.com/docs/search-support/</link>
      <pubDate>Thu, 05 Jul 2018 20:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/search-support/</guid>
      <description>Engimo supports the following clients for the search feature:
 Algolia Fuse.js Lunr.js  Follow the following steps for enabling search in your site.
Create Search Page First of all, you&amp;rsquo;ll need to create a search page.
Create a markdown file under /content/search/ directory with the filename _index.md.
Add the following options in the frontmatter:
type: page layout: search outputs: - html - json Select Search Client For selecting the client for search feature, use the following options in your config.</description>
    </item>
    
    <item>
      <title>Comments Support</title>
      <link>https://stem-notes.netlify.com/docs/comments-support/</link>
      <pubDate>Thu, 29 Mar 2018 09:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/comments-support/</guid>
      <description>Engimo has support for comments baked into it.
Enable/Disable Comments Globally For enabling or disabling comments globally, check the following setting in your config.toml file:
[params.comments] enable = false  params.comments [Map]:  enable [Boolean]: Enable/Disable comments globally   For Specific Posts The global .Site.Params.comments.enable setting can be overridden for specific posts in their content&amp;rsquo;s frontmatter with this option:
--- comments: true ---  comments [Boolean]: Enable/Disable comments for specific posts  Of course, you&amp;rsquo;ll also need to setup a comment system ( Disqus or Staticman ).</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://stem-notes.netlify.com/docs/emoji-support/</link>
      <pubDate>Tue, 27 Feb 2018 21:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/emoji-support/</guid>
      <description>First of all, if you really want emojis, set the enableEmoji setting to true in your config.toml file:
enableEmoji = true This will enable Hugo to find Emoji Shorthands in your content files and render them as Unicode Emoji Characters.
For example:
:smiley: will become 😃
No, it&amp;rsquo;ll probably not be that colorful! Unless your device&amp;rsquo;s operating system natively supports colorful emojis, you will see a black &amp;amp; white one instead.</description>
    </item>
    
    <item>
      <title>MathJax Support</title>
      <link>https://stem-notes.netlify.com/docs/mathjax-support/</link>
      <pubDate>Tue, 27 Feb 2018 18:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/mathjax-support/</guid>
      <description>For enabling MathJax, add this to your content&amp;rsquo;s frontmatter:
--- mathjax: true --- MathJax Syntax for Markdown In your Markdown content, use \\(&amp;hellip;\\) delimiters for in-line mathematics.
For mathematics blocks you can use either $$&amp;hellip;$$ or \\[&amp;hellip;\\] as delimiters.
Here&amp;rsquo;s an example Markdown content:
When \\( a \ne 0 \\), there are two solutions to$$ ax^2 + bx + c = 0 $$and they are:\\[ x = {-b \pm \sqrt{b^2-4ac} \over 2a} \\] Output:</description>
    </item>
    
    <item>
      <title>Sidebar</title>
      <link>https://stem-notes.netlify.com/docs/sidebar/</link>
      <pubDate>Wed, 07 Feb 2018 19:15:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/sidebar/</guid>
      <description>Enabling Sidebar For enabling Sidebar, use the following configuration options in your config.toml file:
[params.sidebar] enable = true  params.sidebar [Map]:  enable [Boolean]: Switch for enabling sidebar   Adding Widgets to Sidebar For adding Widgets to the Sidebar, check the Widgets documentation.</description>
    </item>
    
    <item>
      <title>Widgets</title>
      <link>https://stem-notes.netlify.com/docs/widgets/</link>
      <pubDate>Wed, 07 Feb 2018 18:30:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/widgets/</guid>
      <description>Engimo supports Widgets that you can place on specific Widget Areas.
Available Widgets Engimo has the following built-in Widgets:
   Name Slug     1. About about   2. Recent Posts recent_posts   3. Search search   4. Sidebar Menu sidebar_menu   5. Social Menu social_menu   6. Taxonomy Cloud taxonomy_cloud    Widget Configuration Options Here are the configuration options available for the Widgets:</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>https://stem-notes.netlify.com/docs/shortcodes/</link>
      <pubDate>Thu, 05 Oct 2017 20:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/shortcodes/</guid>
      <description>Engimo comes with several shortcodes built-in.
Shortcode: center Center align you content.
center: Parameters  Markdown content between opening and closing tags.  center: Usage Example {{% center %}} _Center Aligned Text_ {{% /center %}} Output
Center Aligned Text
Shortcode: convo Renders conversation blocks.
convo: Parameters  sep [String] (optional): seperator between person and text (default: &amp;ldquo;:&amp;rdquo;)  convo: Inner Syntax person :: text You can remove the person part, if you want.</description>
    </item>
    
    <item>
      <title>Cover Image</title>
      <link>https://stem-notes.netlify.com/docs/cover-image/</link>
      <pubDate>Sat, 30 Sep 2017 14:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/cover-image/</guid>
      <description>You can add cover image to your contents with the cover paramameter in the content&amp;rsquo;s front-matter.
You can directly provide the image url:
--- cover: /images/eden-farm-children-s-village.jpg ---  cover [String]: path/url of the cover image  Or you can provide additional information:
--- cover: image: /images/eden-farm-children-s-village.jpg alternate: Picture of a yellow wall with a blue window in the upper-left corner caption: Eden Farm Children&amp;#39;s Village by Gareth Harper on Unsplash style: full ---  cover [Map]:  image [String]: path/url of the cover image alternate [String]: alternate text for the image caption [String]: caption for the cover image style [String]: full / wide / normal   </description>
    </item>
    
    <item>
      <title>Translation Support</title>
      <link>https://stem-notes.netlify.com/docs/translation/</link>
      <pubDate>Wed, 27 Sep 2017 14:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/translation/</guid>
      <description>You can translate Engimo in your own language!
For example, if you want to translate Engimo in Spanish, you will have to add this to your site&amp;rsquo;s config file:
[languages.es] lang = &amp;#34;es&amp;#34; languageName = &amp;#34;Spanish&amp;#34; weight = 1 Then create a folder named /i18n/ in your site&amp;rsquo;s root. And create a file /i18n/es.toml with the translated strings.
For reference template you can see the en.toml file.
If you want your translation file to be included in Engimo repository, feel free to create a pull request.</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>https://stem-notes.netlify.com/docs/syntax-highlighting/</link>
      <pubDate>Wed, 27 Sep 2017 12:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/syntax-highlighting/</guid>
      <description>Hugo uses Chroma as it&amp;rsquo;s built-in syntax-highlighter.
For detailed information about Syntax Highlighting in Hugo, check the Hugo&amp;rsquo;s Syntax Highlighting Documentation.</description>
    </item>
    
    <item>
      <title>Menus Setup Guide</title>
      <link>https://stem-notes.netlify.com/docs/menus/</link>
      <pubDate>Wed, 27 Sep 2017 10:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/menus/</guid>
      <description>Engimo has three menus.
 Main Menu Sidebar Menu Social Menu  Main Menu name: main
Main menu is located at the top of the site.
Check Hugo&amp;rsquo;s Menus Documentation for information about managing this menu.
You can hide the Main Menu using the following option in your config.toml file:
[params.settings] hideMainMenu = true Sidebar Menu name: sidebar
Social Menu is available as Widget: sidebar_menu. Add it to the sidebar Widget Area to use it.</description>
    </item>
    
    <item>
      <title>Opengraph Support</title>
      <link>https://stem-notes.netlify.com/docs/opengraph/</link>
      <pubDate>Tue, 26 Sep 2017 08:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/opengraph/</guid>
      <description>Engimo has built-in support for Opengraph tags. It will pick up most of the things from your contents&amp;rsquo; front-matters &amp;amp; Hugo configuration.
You can use these options in you content&amp;rsquo;s front-matter:
--- audios: [] # for og:audio tags images: [] # for og:image tags videos: [] # for og:video tags ---  audios [Array of Strings]: path/url of audio files images [Array of Strings]: path/url of image files videos [Array of Strings]: path/url of video files  N.</description>
    </item>
    
    <item>
      <title>Authors Setup Guide</title>
      <link>https://stem-notes.netlify.com/docs/authors/</link>
      <pubDate>Tue, 26 Sep 2017 06:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/authors/</guid>
      <description>Engimo supports multiple authors for your site. Just make sure you have the following configuration in your site&amp;rsquo;s config.toml:
[taxonomies] author = &amp;#34;authors&amp;#34; Engimo treats Authors as a Hugo Taxonomy.
Author&amp;rsquo;s Profile For adding an author to your site:
 Create data/authors folder in your site&amp;rsquo;s root directory Create a file with the filename format: &amp;lt;username&amp;gt;.toml  Now, add information about the author using the structure below:
/data/authors/muniftanjim.toml
id = &amp;#34;muniftanjim&amp;#34; [email] username = &amp;#34;muniftanjim&amp;#34; host = &amp;#34;gmail.</description>
    </item>
    
    <item>
      <title>Configuration File: config.toml</title>
      <link>https://stem-notes.netlify.com/docs/config-file/</link>
      <pubDate>Mon, 25 Sep 2017 08:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/config-file/</guid>
      <description>This is the Engimo&amp;rsquo;s configuraion file ( config.toml ) file of this site:
#------------------- # # config.toml # # # # Hugo configuration # # ------------------ # # Website base URL #baseURL = &amp;#34;http://localhost:1313/&amp;#34; # dev #baseURL = &amp;#34;https://patevs.github.io/STEM-Notes/&amp;#34; # ghpages baseURL = &amp;#34;https://stem-notes.netlify.com/&amp;#34; # netlify # english languageCode = &amp;#34;en-us&amp;#34; # Website title title = &amp;#34;STEM Notes&amp;#34; # build directory default: &amp;#34;public&amp;#34;  # set to docs for ghpages deploy #publishDir = &amp;#34;docs&amp;#34; # for smart copyright line, leave this blank and check [params.</description>
    </item>
    
    <item>
      <title>Updating Guide</title>
      <link>https://stem-notes.netlify.com/docs/updating/</link>
      <pubDate>Mon, 25 Sep 2017 06:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/updating/</guid>
      <description>Updating Engimo Update Engimo clone Just replace the themes/engimo folder with the latest version of Engimo clone, i.e. delete the old folder and clone again:
rm -rf themes/engimo git clone --depth 1 https://github.com/MunifTanjim/engimo themes/engimo Then, commit the changes:
git add themes/engimo git commit -m &amp;#34;update [theme]: engimo&amp;#34; Update Engimo submodule cd themes/engimo git checkout master git fetch &amp;amp;&amp;amp; git pull cd ../.. git add themes/engimo git commit -m &amp;#34;update [theme]: engimo&amp;#34; To Do After Updating Engimo After updating Engimo, always check that your site&amp;rsquo;s config.</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>https://stem-notes.netlify.com/docs/installation/</link>
      <pubDate>Mon, 25 Sep 2017 02:00:00 +0600</pubDate>
      
      <guid>https://stem-notes.netlify.com/docs/installation/</guid>
      <description>First of all you will need to setup a Hugo site. You can follow the Hugo&amp;rsquo;s Quick Start Guide for that.
After you&amp;rsquo;re done with that, it&amp;rsquo;s time for installing Engimo!
Installing Engimo There are two different ways you can install Engimo:
 As clone As submodule  The second method is recommended.
Install Engimo as clone With this method, you will simply clone it. And a copy of Engimo&amp;rsquo;s repository will be stored with the rest of you site.</description>
    </item>
    
  </channel>
</rss>